const crypto = require('crypto')
const request = require('request-promise-native')

const WRONG_PARAMETER = 'WRONG_PARAMETER'
const SERVER_SUCCESS = 'SERVER_SUCCESS'
const SERVER_FAILED = 'SERVER_FAILED'
const VERIFY_URL = 'https://cap.dingxiang-inc.com/api/tokenVerify'
const TIMEOUT = 2000

const md5 = str => {
  const hash = crypto.createHash('md5')
  hash.update(str)
  return hash.digest('hex')
}

class CaptchaSDK {
  constructor(appId='', appSecret='') {
    this.appId = appId
    this.appSecret = appSecret
    this.captchaUrl = VERIFY_URL
  }

  setCaptchaUrl(url=VERIFY_URL) {
    this.captchaUrl = url
  }

  getVerifySign(token) {
    return md5(this.appSecret + token + this.appSecret)
  }

  verifyToken(token='', timeout=TIMEOUT) {
    const pair = token.split(':')
    const _token = pair[0]
    const _constId = pair[1] || ''

    if (this.appId.length === 0 || this.appSecret.length === 0 || _token.length === 0 || _token.length > 1024) {
      return Promise.reject(new Error(WRONG_PARAMETER))
    }

    const sign = this.getVerifySign(_token)

    return new Promise((resolve, reject) => {
      request.get({
        url: this.captchaUrl,
        qs: {
          token: _token,
          constId: _constId,
          appKey: this.appId,
          sign
        },
        json: true,
        timeout        
      }).then(resp => {
        if (resp.success) {
          resolve({
            result: true,
            captchaStatus: SERVER_SUCCESS
          })
        } else {
          reject({
            result: false,
            captchaStatus: SERVER_SUCCESS
          })
        }
      }).catch(err => {
        resolve({
          result: true,
          captchaStatus: SERVER_FAILED
        })
      })
    })
  }
}

module.exports = CaptchaSDK